# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

shared_library("pepper_container_app") {
  output_name = "mojo_pepper_container_app"

  sources = [
    # Source files from ppapi/.
    # An alternative is to depend on
    # "//ppapi/ppapi_shared', but that target includes
    # a lot of things that we don't need.
    # TODO(yzshen): Consider extracting these files into a separate target
    # which mojo_pepper_container_app and ppapi_shared both depend on.
    "//ppapi/shared_impl/api_id.h",
    "//ppapi/shared_impl/callback_tracker.cc",
    "//ppapi/shared_impl/callback_tracker.h",
    "//ppapi/shared_impl/host_resource.cc",
    "//ppapi/shared_impl/host_resource.h",
    "//ppapi/shared_impl/id_assignment.cc",
    "//ppapi/shared_impl/id_assignment.h",
    "//ppapi/shared_impl/ppapi_globals.cc",
    "//ppapi/shared_impl/ppapi_globals.h",
    "//ppapi/shared_impl/ppapi_shared_export.h",
    "//ppapi/shared_impl/ppb_message_loop_shared.cc",
    "//ppapi/shared_impl/ppb_message_loop_shared.h",
    "//ppapi/shared_impl/ppb_view_shared.cc",
    "//ppapi/shared_impl/ppb_view_shared.h",
    "//ppapi/shared_impl/proxy_lock.cc",
    "//ppapi/shared_impl/proxy_lock.h",
    "//ppapi/shared_impl/resource.cc",
    "//ppapi/shared_impl/resource.h",
    "//ppapi/shared_impl/resource_tracker.cc",
    "//ppapi/shared_impl/resource_tracker.h",
    "//ppapi/shared_impl/scoped_pp_resource.cc",
    "//ppapi/shared_impl/scoped_pp_resource.h",
    "//ppapi/shared_impl/singleton_resource_id.h",
    "//ppapi/shared_impl/tracked_callback.cc",
    "//ppapi/shared_impl/tracked_callback.h",
    "//ppapi/thunk/enter.cc",
    "//ppapi/thunk/enter.h",
    "//ppapi/thunk/interfaces_ppb_private.h",
    "//ppapi/thunk/interfaces_ppb_private_flash.h",
    "//ppapi/thunk/interfaces_ppb_private_no_permissions.h",
    "//ppapi/thunk/interfaces_ppb_public_dev.h",
    "//ppapi/thunk/interfaces_ppb_public_dev_channel.h",
    "//ppapi/thunk/interfaces_ppb_public_stable.h",
    "//ppapi/thunk/interfaces_preamble.h",
    "//ppapi/thunk/ppapi_thunk_export.h",
    "//ppapi/thunk/ppb_graphics_3d_api.h",
    "//ppapi/thunk/ppb_graphics_3d_thunk.cc",
    "//ppapi/thunk/ppb_instance_api.h",
    "//ppapi/thunk/ppb_instance_thunk.cc",
    "//ppapi/thunk/ppb_message_loop_api.h",
    "//ppapi/thunk/ppb_view_api.h",
    "//ppapi/thunk/ppb_view_thunk.cc",
    "//ppapi/thunk/resource_creation_api.h",
    "//ppapi/thunk/thunk.h",

    "graphics_3d_resource.cc",
    "graphics_3d_resource.h",
    "interface_list.cc",
    "interface_list.h",
    "mojo_ppapi_globals.cc",
    "mojo_ppapi_globals.h",
    "pepper_container_app.cc",
    "plugin_instance.cc",
    "plugin_instance.h",
    "plugin_module.cc",
    "plugin_module.h",
    "ppb_core_thunk.cc",
    "ppb_opengles2_thunk.cc",
    "resource_creation_impl.cc",
    "resource_creation_impl.h",
    "thunk.h",
    "type_converters.h",
  ]

  defines = [
    # We don't really want to export. We could change how
    # ppapi_{shared,thunk}_export.h are defined to avoid this.
    "PPAPI_SHARED_IMPLEMENTATION",
    "PPAPI_THUNK_IMPLEMENTATION",
  ]

  deps = [
    "//base",
    "//base/third_party/dynamic_annotations",
    "//gpu/command_buffer/common",
    "//ppapi:ppapi_c",
    # TODO(GYP):
    # "//ppapi:ppapi_example_gles2_spinning_cube",
    "//mojo/application",
    "//mojo/common",
    "//mojo/public/c/system:for_shared_library",
    "//mojo/public/gles2:for_shared_library",
    "//mojo/services/public/interfaces/geometry",
    "//mojo/services/public/interfaces/gpu",
    "//mojo/services/public/interfaces/native_viewport",
    "//ui/events:events_base",
  ]
}
